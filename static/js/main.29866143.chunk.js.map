{"version":3,"sources":["utils.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","process","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","src","alt","character","index","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","characterNFTMeta","setCharacterNFTMeta","showToast","setShowToast","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","runAttackAction","attackBoss","attackTxn","setTimeout","id","value","max","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","length","account","fetchNFTMetadata","provider","myNFTGame","txn","connectWalletAction","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29866143.chunk.js","sourcesContent":["const transformCharacterData = characterData => {\n    return {\n        name: characterData.name,\n        imageURI: characterData.imageURI,\n        hp: characterData.hp.toNumber(),\n        maxHp: characterData.maxHp.toNumber(),\n        attackDamage: characterData.attackDamage.toNumber(),\n    }\n}\n\nexport { transformCharacterData }\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react'\nimport './SelectCharacter.css'\nimport { ethers } from 'ethers'\nimport { transformCharacterData } from '../../utils'\nimport myEpicGame from '../../artifacts/contracts/NFTGame.sol/MyEpicGame.json'\nimport LoadingIndicator from '../LoadingIndicator'\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n    const [characters, setCharacters] = useState([])\n    const [gameContract, setGameContract] = useState(null)\n    const [mintingCharacter, setMintingCharacter] = useState(false)\n    // UseEffect\n    useEffect(() => {\n        const { ethereum } = window\n\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum)\n            const signer = provider.getSigner()\n            const gameContract = new ethers.Contract(\n                process.env.REACT_APP_CONTRACT,\n                myEpicGame.abi,\n                signer,\n            )\n            setGameContract(gameContract)\n        } else {\n            console.log('Ethereum object not found')\n        }\n    }, [])\n\n    useEffect(() => {\n        const getCharacters = async () => {\n            try {\n                console.log('Getting contract characters to mint')\n\n                const charactersTxn =\n                    await gameContract.getAllDefaultCharacters()\n                console.log('charactersTxn:', charactersTxn)\n\n                const characters = charactersTxn.map(characterData =>\n                    transformCharacterData(characterData),\n                )\n\n                setCharacters(characters)\n            } catch (error) {\n                console.error(\n                    'Something went wrong fetching characters:',\n                    error,\n                )\n            }\n        }\n\n        /*\n         * Add a callback method that will fire when this event is received\n         */\n        const onCharacterMint = async (sender, tokenId, characterIndex) => {\n            console.log(\n                `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`,\n            )\n\n            /*\n             * Once our character NFT is minted we can fetch the metadata from our contract\n             * and set it in state to move onto the Arena\n             */\n            if (gameContract) {\n                const characterNFT = await gameContract.checkIfUserHasNFT()\n                console.log('CharacterNFT: ', characterNFT)\n                setCharacterNFT(transformCharacterData(characterNFT))\n            }\n        }\n\n        if (gameContract) {\n            getCharacters()\n\n            /*\n             * Setup NFT Minted Listener\n             */\n            gameContract.on('CharacterNFTMinted', onCharacterMint)\n        }\n\n        return () => {\n            /*\n             * When your component unmounts, let;s make sure to clean up this listener\n             */\n            if (gameContract) {\n                gameContract.off('CharacterNFTMinted', onCharacterMint)\n            }\n        }\n    }, [gameContract, setCharacterNFT])\n\n    // Actions\n    const mintCharacterNFTAction = characterId => async () => {\n        try {\n            if (gameContract) {\n                setMintingCharacter(true)\n                console.log('Minting character in progress...')\n                const mintTxn = await gameContract.mintCharacterNFT(characterId)\n                await mintTxn.wait()\n                console.log('mintTxn:', mintTxn)\n                setMintingCharacter(false)\n            }\n        } catch (error) {\n            console.warn('MintCharacterAction Error:', error)\n            setMintingCharacter(false)\n        }\n    }\n\n    return (\n        <div className=\"select-character-container\">\n            <h2>Mint Your Hero. Choose wisely.</h2>\n            {mintingCharacter && (\n                <div className=\"loading\">\n                    <div className=\"indicator\">\n                        <LoadingIndicator />\n                        <p>Minting In Progress...</p>\n                    </div>\n                    <img\n                        src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n                        alt=\"Minting loading indicator\"\n                    />\n                </div>\n            )}\n            <div className=\"character-grid\">\n                {characters.map((character, index) => (\n                    <div className=\"character-item\" key={character.name}>\n                        <div className=\"name-container\">\n                            <p>{character.name}</p>\n                        </div>\n                        <img src={character.imageURI} alt={character.name} />\n                        <button\n                            type=\"button\"\n                            className=\"character-mint-button\"\n                            onClick={mintCharacterNFTAction(index)}\n                        >{`Mint ${character.name}`}</button>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default SelectCharacter\n","import React, { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { transformCharacterData } from '../../utils'\nimport myEpicGame from '../../artifacts/contracts/NFTGame.sol/MyEpicGame.json'\nimport LoadingIndicator from '../LoadingIndicator'\nimport './Arena.css'\n\n/*\n * We pass in our characterNFT metadata so we can a cool card in our UI\n */\nconst Arena = ({ characterNFT }) => {\n    const [gameContract, setGameContract] = useState(null)\n    const [boss, setBoss] = useState(null)\n    const [attackState, setAttackState] = useState('')\n    const [characterNFTMeta, setCharacterNFTMeta] = useState(characterNFT)\n    const [showToast, setShowToast] = useState(false)\n\n    useEffect(() => {\n        const { ethereum } = window\n\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum)\n            const signer = provider.getSigner()\n            const gameContract = new ethers.Contract(\n                process.env.REACT_APP_CONTRACT,\n                myEpicGame.abi,\n                signer,\n            )\n\n            setGameContract(gameContract)\n        } else {\n            console.log('Ethereum object not found')\n        }\n    }, [])\n\n    useEffect(() => {\n        const fetchBoss = async () => {\n            const bossTxn = await gameContract.getBigBoss()\n            console.log('Boss:', bossTxn)\n            setBoss(transformCharacterData(bossTxn))\n        }\n\n        /*\n         * Setup logic when this event is fired off\n         */\n        const onAttackComplete = (newBossHp, newPlayerHp) => {\n            const bossHp = newBossHp.toNumber()\n            const playerHp = newPlayerHp.toNumber()\n\n            console.log(\n                `AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`,\n            )\n\n            /*\n             * Update both player and boss Hp\n             */\n            setBoss(prevState => {\n                return { ...prevState, hp: bossHp }\n            })\n\n            setCharacterNFTMeta(prevState => {\n                return { ...prevState, hp: playerHp }\n            })\n        }\n\n        if (gameContract) {\n            fetchBoss()\n            gameContract.on('AttackComplete', onAttackComplete)\n        }\n\n        /*\n         * Make sure to clean up this event when this component is removed\n         */\n        return () => {\n            if (gameContract) {\n                gameContract.off('AttackComplete', onAttackComplete)\n            }\n        }\n    }, [gameContract])\n\n    const runAttackAction = async () => {\n        try {\n            if (gameContract) {\n                setAttackState('attacking')\n                console.log('Attacking boss...')\n                const attackTxn = await gameContract.attackBoss()\n                await attackTxn.wait()\n                console.log('attackTxn:', attackTxn)\n                setAttackState('hit')\n                setShowToast(true)\n                setTimeout(() => {\n                    setShowToast(false)\n                }, 5000)\n            }\n        } catch (error) {\n            console.error('Error attacking boss:', error)\n            setAttackState('')\n        }\n    }\n    return (\n        <div className=\"arena-container\">\n            {boss && showToast && (\n                <div id=\"toast\" className=\"show\">\n                    <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n                </div>\n            )}\n            {boss && (\n                <div className=\"boss-container\">\n                    <div className={`boss-content`}>\n                        <h2>🔥 {boss.name} 🔥</h2>\n                        <div className=\"image-content\">\n                            <img\n                                src={boss.imageURI}\n                                alt={`Boss ${boss.name}`}\n                            />\n                            <div className=\"health-bar\">\n                                <progress value={boss.hp} max={boss.maxHp} />\n                                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"attack-container\">\n                        <button\n                            className=\"cta-button\"\n                            onClick={runAttackAction}\n                        >\n                            {`💥 Attack ${boss.name}`}\n                        </button>\n                    </div>\n                </div>\n            )}\n            {attackState === 'attacking' && (\n                <div className=\"loading-indicator\">\n                    <LoadingIndicator />\n                    <p>Attacking ⚔️</p>\n                </div>\n            )}\n            {characterNFTMeta && (\n                <div className=\"players-container\">\n                    <div className=\"player-container\">\n                        <h2>Your Character</h2>\n                        <div className=\"player\">\n                            <div className=\"image-content\">\n                                <h2>{characterNFTMeta.name}</h2>\n                                <img\n                                    src={characterNFTMeta.imageURI}\n                                    alt={`Character ${characterNFTMeta.name}`}\n                                />\n                                <div className=\"health-bar\">\n                                    <progress\n                                        value={characterNFTMeta.hp}\n                                        max={characterNFTMeta.maxHp}\n                                    />\n                                    <p>{`${characterNFTMeta.hp} / ${characterNFTMeta.maxHp} HP`}</p>\n                                </div>\n                            </div>\n                            <div className=\"stats\">\n                                <h4>{`⚔️ Attack Damage: ${characterNFTMeta.attackDamage}`}</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Arena\n","import React, { useEffect, useState } from 'react'\nimport SelectCharacter from './Components/SelectCharacter'\nimport Arena from './Components/Arena'\nimport LoadingIndicator from './Components/LoadingIndicator'\nimport { ethers } from 'ethers'\nimport './App.css'\n\nimport myNFTGame from './artifacts/contracts/NFTGame.sol/MyEpicGame.json'\nimport { transformCharacterData } from './utils'\n\nconst App = () => {\n    const [currentAccount, setCurrentAccount] = useState(null)\n    const [characterNFT, setCharacterNFT] = useState(null)\n    const [isLoading, setIsLoading] = useState(false)\n\n    useEffect(() => {\n        const checkIfWalletIsConnected = async () => {\n            try {\n                const { ethereum } = window\n\n                if (!ethereum) {\n                    console.log('Make sure you have MetaMask!')\n                    return\n                } else {\n                    console.log('We have the ethereum object', ethereum)\n                    const accounts = await ethereum.request({\n                        method: 'eth_accounts',\n                    })\n                    if (accounts.length !== 0) {\n                        const account = accounts[0]\n                        console.log('Found an authorized account:', account)\n                        setCurrentAccount(account)\n                    } else {\n                        console.log('No authorized account found')\n                    }\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        }\n        setIsLoading(true)\n        checkIfWalletIsConnected()\n    }, [])\n\n    useEffect(() => {\n        /*\n         * The function we will call that interacts with out smart contract\n         */\n        const fetchNFTMetadata = async () => {\n            console.log(\n                'Checking for Character NFT on address:',\n                currentAccount,\n            )\n\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            const gameContract = new ethers.Contract(\n                process.env.REACT_APP_CONTRACT,\n                myNFTGame.abi,\n                signer,\n            )\n            const txn = await gameContract.checkIfUserHasNFT()\n            if (txn.name) {\n                console.log('User has character NFT')\n                setCharacterNFT(transformCharacterData(txn))\n            } else {\n                console.log('No character NFT found!')\n            }\n        }\n\n        if (currentAccount) {\n            console.log('CurrentAccount:', currentAccount)\n            fetchNFTMetadata()\n        }\n        setIsLoading(false)\n    }, [currentAccount])\n\n    const connectWalletAction = async () => {\n        try {\n            const { ethereum } = window\n\n            if (!ethereum) {\n                alert('Get MetaMask!')\n                return\n            }\n\n            /*\n             * Fancy method to request access to account.\n             */\n            const accounts = await ethereum.request({\n                method: 'eth_requestAccounts',\n            })\n\n            /*\n             * Boom! This should print out public address once we authorize Metamask.\n             */\n            console.log('Connected', accounts[0])\n            setCurrentAccount(accounts[0])\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    if (isLoading) {\n        return <LoadingIndicator />\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <p>Use Kovan Test Network to play</p>\n                <div className=\"header-container\">\n                    <p className=\"header gradient-text\">⚔️ Monster Slayer ⚔️</p>\n                    <p className=\"sub-text\"></p>\n                    <div className=\"connect-wallet-container\">\n                        <img\n                            src=\"https://data.whicdn.com/images/273929193/original.gif\"\n                            alt=\"Stranger Things Gif\"\n                        />\n                    </div>\n                    {!currentAccount && (\n                        <button\n                            className=\"cta-button connect-wallet-button\"\n                            onClick={connectWalletAction}\n                        >\n                            Connect Wallet To Get Started\n                        </button>\n                    )}\n                    {currentAccount && !characterNFT && (\n                        <SelectCharacter setCharacterNFT={setCharacterNFT} />\n                    )}\n                    {currentAccount && characterNFT && (\n                        <Arena characterNFT={characterNFT} />\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}